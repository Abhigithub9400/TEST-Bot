# Use the official Ubuntu 22.04 image as the base for the build
FROM ubuntu:22.04 AS build

# Accept environment argument with default value
ARG ASPNETCORE_ENVIRONMENT=Development
ENV ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT

# Set environment variables to prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install necessary dependencies for building .NET applications
RUN apt-get update && \
    apt-get install -y \
    wget \
    gnupg \
    apt-transport-https \
    ca-certificates \
    software-properties-common \
    libcurl4-openssl-dev \
    libssl-dev \
    libicu-dev \
    zlib1g-dev

# Add Microsoft's package repository for .NET SDK and runtime
RUN wget https://packages.microsoft.com/config/ubuntu/22.04/prod.list \
    && mv prod.list /etc/apt/sources.list.d/microsoft-prod.list \
    && wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add - \
    && apt-get update

# Install .NET SDK and runtime
RUN apt-get install -y dotnet-sdk-8.0

# Set environment variables for .NET
ENV DOTNET_ROOT=/usr/share/dotnet
ENV PATH=$PATH:$DOTNET_ROOT

# Set the working directory to the current folder (MediAssist.API)
WORKDIR /src

# Copy all project files (from the parent directory) into the Docker image
COPY .. .

# Restore the dependencies for the project
RUN dotnet restore "MediAssist.API/MediAssist.API.csproj"

# Publish the application in Release mode
RUN dotnet publish "MediAssist.API/MediAssist.API.csproj" -c Release -o /app/publish

# Use a new stage for the runtime environment based on Ubuntu 22.04
FROM ubuntu:22.04 AS runtime

# Pass the environment variable from build to runtime stage
ARG ASPNETCORE_ENVIRONMENT=Development
ENV ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT

# Set environment variables for the runtime stage
ENV DEBIAN_FRONTEND=noninteractive

# Install necessary runtime dependencies, .NET runtime, and Apache
RUN apt-get update && \
    apt-get install -y \
    wget \
    gnupg \
    libcurl4-openssl-dev \
    libssl-dev \
    libicu-dev \
    zlib1g-dev \
    apache2 \
    && wget https://packages.microsoft.com/config/ubuntu/22.04/prod.list \
    && mv prod.list /etc/apt/sources.list.d/microsoft-prod.list \
    && wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add - \
    && apt-get update \
    && apt-get install -y dotnet-runtime-8.0 \
    && apt-get install -y aspnetcore-runtime-8.0

# Enable Apache modules required for the proxy
RUN a2enmod proxy proxy_http proxy_wstunnel rewrite

# Set the working directory to /app
WORKDIR /app

# Copy the published application from the build stage
COPY --from=build /app/publish .

# Copy Apache configuration
COPY CI-CD/apache.conf /etc/apache2/sites-available/000-default.conf

# ASP.NET Core will listen on port 5000 internally
ENV ASPNETCORE_URLS=http://0.0.0.0:5000

# Create a startup script to run both ASP.NET Core and Apache
RUN echo '#!/bin/bash\n\
service apache2 start\n\
echo "Starting application with ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT"\n\
dotnet MediAssist.API.dll\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose port 80 for Apache
EXPOSE 80

# Define the entry point to run the startup script
ENTRYPOINT ["/app/start.sh"]